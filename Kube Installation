sudo su -
swapoff -a

cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter

cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

apt-get update
apt-get install -y software-properties-common curl

KUBERNETES_VERSION=v1.29
PROJECT_PATH=prerelease:/main

curl -fsSL https://pkgs.k8s.io/core:/stable:/$KUBERNETES_VERSION/deb/Release.key |
    gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/$KUBERNETES_VERSION/deb/ /" |
    tee /etc/apt/sources.list.d/kubernetes.list

curl -fsSL https://pkgs.k8s.io/addons:/cri-o:/$PROJECT_PATH/deb/Release.key |
    gpg --dearmor -o /etc/apt/keyrings/cri-o-apt-keyring.gpg

echo "deb [signed-by=/etc/apt/keyrings/cri-o-apt-keyring.gpg] https://pkgs.k8s.io/addons:/cri-o:/$PROJECT_PATH/deb/ /" |
    tee /etc/apt/sources.list.d/cri-o.list

apt-get update
apt-get install -y cri-o kubelet kubeadm kubectl

systemctl start crio.service

crio --version
kubelet --version
kubeadm --version
kubectl --version

kubeadm init --apiserver-advertise-address `hostname -i | awk '{print $1}'` --pod-network-cidr 10.10.0.0/16 --service-cidr 20.20.0.0/16 --service-dns-domain thinknyx.org 

mkdir ~/.kube
cp /etc/kubernetes/admin.conf ~/.kube/config
kubectl get pods -A
kubectl get nodes

kubectl get pods -A -o wide

curl https://raw.githubusercontent.com/projectcalico/calico/v3.27.0/manifests/calico.yaml -O
kubectl apply -f calico.yaml
kubeadm token create --print-join-command

kubectl get pods -A
kubectl get pods //check default pods
kubectl config get-context

--------------------------------
kube public 
kube system
kube public
kubectl node lease //checking pod health
------------------------------------
kubectl create namespace thinknyx
kubectl config set --current --namespace thinknyx
kubectl config set-context --current --namespace
kubectl config get-contexts

kubectl config set-context --current --namespace thinknyx //adding namepace
kubectl get pods //show pods
kubectl config get-contexts //show cluster informations
cat ~/.kube/config //showing the certificate

kubectl run mypod --image public.ecr.aws/p9u1y6y4/httpd:1.2 //creating pod
kubectl describe pod mypod //
kubectl delete pod mypod
kubectl describe nodes | grep -i taint

kubectl taint node node1 node-role.kubernetes.io/control-plane-

curl {ip address}

kubectl scale deployment {podname} --replicas 4
kubectl scale deployment {podname} --replicas 1

//For Deploment
kubectl expose deployment httpd --name httpd-svc --type NodePort --port 80 --target-port 80
//For Service 
kubectl expose deployment tomcat --name tomcat-svc --type NodePort --port 80 --target-port 8080
//For With External IP Service 
kubectl expose deployment tomcat --name tomcat-svc --type NodePort --port 80 --target-port 8080 --external-ip 192.168.100.132 

apt-get install -y openssh-server
shh user@node2 //in command 
yes //choose option
sudo su - //for change user node to root

   26  apt-get install -y vim
   27  vi calico.yaml
   28  kubectl apply -f calico.yaml
   29  kubectl get pods -A -o
   30  kubectl get pods -A wide
   31  kubectl get pods -A -o wide
   32  kubeadm token create --print-join-command

----------------------------------------------------------------14 FEB
kubectl create deployment tomcat --image public.ecr.aws/p9u1y6y4/tomcat:10.1.16 --replicas 1
kubectl edit service tomcat-svc
keybord command ESC button with i
kubectl get rs
-----------------------------
 63  kubectl expose deployment postgres --name postgres-svc --type NodePort --port 80 --target-port 5432
   64  kubectl create namespace database
   65  kubectl get service
   66  kubectl get rs

--------------------------------------

    1  sudo apt update -y
    2  sudo apt upgrade -y
    3  sudo apt install open-vm-tools
    4  cat /etc/os-release 
    5  ipconfiggggggg
    6  ifconfig
    7  sudo apt-get update
    8  ifconfig
    9  sudo apt-get install net-tools
   10  ifconfig
   11  sudo apt-get install -y apache2
   12  sudo apt install nfs-common -y
   13  ip a
   14  ping 8.8.8.8
   15  ip a
   16  sudo -s
   17  df
   18  sudo apt install openssh-server
   19  k
   20  sudo swapoff -a
   21  cat <<EOF | sudo tee etc/module-load.d/k8s.conf overlay br_netfilter EOF
   22  c
   23  ccc
   24  exit
   25  sudo exit
   26  d
   27  kubectl get pods -A
   28  dir
   29  mv postgress.yml postgres.yaml
   30  dir
   31  kubectl apply -f postgres.yaml
   32  kubectl get pods
   33  kubectl get pods -A
   34* kubectl delete database postgras
   35  kubectl describe pod 
   36  kubectl describe pod database
   37  kubectl describe pod postgress
   38  kubectl apply -f postgres.yaml
   39  kubectl get pods -A
   40  kubectl get pods -n database
   41  kubectl delete pods -n database
   42  kubectl delete pods database
   43  kubectl delete pod database
   44  kubectl delete pod postgres-5459dccd47-pd2hr
   45  kubectl delete postgres-5459dccd47-pd2hr
   46  dir
   47  rm postgress.yml
   48  dir
   49  kubectl apply -f postgres.yaml
   50  kubectl get pods -n database
   51  kubectl describe pod postgres-cc7749c4f-s5pzc -n database
   52  kubectl logs postgres-cc7749c4f-s5pzc -n database
   53  kubectl apply -f postgres.yaml
   54  cat post
   55* cat 
   56  kubectl get secretes -n database
   57  kubectl get secrets -n database
   58  kubectl apply -f postgres.yaml
   59  kubectl get pods -n database
   60  kubectl delete pod postgres-5459dccd47-pd2hr

----------------------------------------------------------
   68  kubectl get pods -n psql
   69  kubectl get pods -n default
   70  psql -h postgres.database.svc.thinknyx.org -U postgres -d postgres
   71  kubectl describe -n kube-system configmaps coredns
   72  kubectl exec -it psql -- /bin/bash
   73  kubectl get namespace
   74  kubectl get service
   75  kubectl get -n database
   76  kubectl get -n database service
   77  kubectl get service
   78  kubectl get -n database service

------------------------------------------------------------
15 FEB
-----------------------

   93  kubectl apply -f psql.yaml 
   94  kubectl delete pod psql
   95  kubectl apply -f psql.yaml 
   96  kubectl get pod
   97  kubectl log pod psql
   98  kubectl logs psql
   99  kubectl logs psql kubectl apply -f kubectl_using_secret_as_volume.yml 
  100  kubectl logs psql kubectl apply -f kubectl_using_secret_as_volume.yaml 
  101  kubectl logs psql kubectl apply -f deployment.yaml 
  102* 
  103  kubectl apply -f deployment.yaml 
  104  kubectl logs psql
  105  kubectl get pods
  106* kubectl get pods 
  107  kubectl get logs psql
  108  history
  109  kubectl logs psql
  110  ls -ltr /etc/kubernates
  111  ls
  112  ls ltr
  113  ls -ltr
  114  ls -ltr Desktop/
  115  ls -ltr /etc/kubernates/
  116  ls -ltr /etc/kubernetes/
  117  ls -ltr ~/.kube/
  118  kubectl create secret generic kubeconfig --form-file ~/.kube/config
  119  kubectl create secret generic kubeconfig --from-file ~/.kube/config
  120  kubectl get secret
  121  kubectl describe secrets kubeconfig
  122  kubeadm token create --print-join-command
-----------------------------------------------------------
sudo apt-get install -y net-tools
ifconfig
sudo mount -t nfs 192.168.100.134:/data/share /shared
df -h
   38  kubectl get pv
   39  kubectl apply -f persistant-volume.yaml 
   40  kubectl get pv
-------Persistent.yaml--------
apiVersion: v1
kind: PersistentVolume
metadata:
  name: per-valume
spec:
  capacity:
    storage: 10Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Recycle
  storageClassName: manual
  hostPath:
    path: /shared
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: per-valume-claim
spec:
  resources:
    requests:
      storage: 5Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce

-----------------------------------------------------------------------
16 FEB
--------------------------------------------
sts-demo.yaml
-------------------apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mystatefulset
spec:
  selector:
    matchLabels:
      app: myapp
  serviceName: sts-demo
  replicas: 2
  template:
    metadata:
      labels:
        app: myapp
    spec:
      containers:
      - name: myapp
        image: public.ecr.aws/p9u1y6y4/ubuntu:kubectl
        command:
          - sh
          - -c
          - echo [INFO] Hi form `hostname` at `date` .  >> /temp/sts.txt && tail -f /temp/sts.txt
        ports:
        - containerPort: 80
          name: web
        volumeMounts:
        - name: sts-demo
          mountPath: /temp
      volumes:
      - name: sts-demo
        hostPath:
          type: DirectoryOrCreate
          path: /temp

----------------------
commands:
    1. kubectl apply -f sts-demo.yaml     //for apply 
    2. kubectl get pods     //show pods
    3. kubectl rollout restart statefulset mystatefulset && kubectl get pods -w     //restart statefulset and open watch state
    4. kubectl delete statefulset mystatefulset    //for delete statefulset
    5. ls -ltr /temp/     //for show files
    6. tail -f /temp/sts.txt     //for check messages in txt file
